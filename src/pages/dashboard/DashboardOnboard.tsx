import { settingsOnboarded } from 'api/settingsApi';
import selectedVendors from 'components/restaurantDropdown/selectedVendors';
import OnboardingModal from 'components/settings/onboarding/OnboardingModal';
import OnboardingStepper from 'components/settings/onboarding/OnboardingStepper';
import useTableContentFormatter from 'components/tableRevly/tableContentFormatter/useTableContentFormatter';
import TableRevlyNew from 'components/tableRevly/TableRevlyNew';
import Widget from 'components/widget/Widget';
import { useDates, usePlatform, useUser } from 'contexts';
import { format, getYear } from 'date-fns';
import { enUS } from 'date-fns/locale';
import { useAtom } from 'jotai';
import { ContainerKit, TypographyKit } from 'kits';
import { useEffect, useState } from 'react';
import { useNavigate } from 'react-router-dom';
import { vendorsAtom } from 'store/vendorsAtom';
import { DatePeriod } from 'types';
import './Dashboard.scss';

const Dashboard = () => {
  const [vendors] = useAtom(vendorsAtom);
  const { display, chainData } = vendors;
  const [table, setTable] = useState('revenue');

  const links = [
    { title: 'Revenue', link: 'revenue', tooltip: 'Revenue generated by the offer' },
    { title: 'Orders', link: 'n_orders', tooltip: '# of orders generated by the offer' },
    { title: 'Avg. basket', link: 'average_basket' },
    {
      title: 'Net revenue',
      link: 'profit',
      tooltip: `Revenue generated by the offer minus aggregator's commission, discounts amount, ads CPC and food cost.`,
    },
    { title: 'Accrued discount', link: 'accrued_discounts' },
    { title: 'Ads spend', link: 'ads_spend', disabled: true },
    {
      title: 'Return on investment',
      link: 'roi',
      tooltip: `# AED generated in Profits for every 1 AED spent on discount. Profits are revenue minus aggregator's commission, order discount, ads CPC and food cost.`,
    },
    {
      title: 'Accrued discount',
      link: 'accrued_ads',
    },
    {
      title: 'ROAS',
      link: 'roas',
    },
  ];
  const [openedModal, setOpenedModal] = useState(false);
  const [activeStep, setActiveStep] = useState(0);
  const [branchDataUploading, setBranchDataUploading] = useState([]);
  const [branchData, setBranchData] = useState([]);
  const [accounts, setAccounts] = useState([]);
  const [connectAccount, setConnectAccount] = useState('account');
  const [connect, setConnect] = useState('');
  const openCloseModal = () => {
    setOpenedModal(!openedModal);
    if (connectAccount === 'manageBranch' || connectAccount === 'completed') {
      setConnectAccount('account');
    }
    const body = document.querySelector('body');
    const navbar = document.querySelector('.Navbar');
    if (!openedModal) {
      navbar.classList.add('openedModal');
      body.style.overflowY = 'hidden';
      return;
    }
    body.style.overflowY = 'visible';
  };
  const propsVariables = {
    openCloseModal,
    setConnect,
    connect,
    setAccounts,
    accounts,
    setBranchData,
    branchData,
    setBranchDataUploading,
    branchDataUploading,
    setActiveStep,
    activeStep,
    openedModal,
    connectAccount,
    setConnectAccount,
  };
  const { userPlatformData, setUserPlatformData } = usePlatform();
  const { current, compare, calendar, currentTitle, compareTitle } = useDates();

  const getPeriod = (title: string, period: DatePeriod) => {
    if (title === 'custom') {
      if (calendar === 'day') {
        return `${period.from.format('DD/MM')}`;
      }

      if (calendar === 'month') {
        return `${format(period.from.toDate(), 'LLL', { locale: enUS })}  -  ${getYear(
          period.from.toDate()
        )}`;
      }

      return `${period.from.format('DD/MM')} - ${period.until.format('DD/MM')}`;
    }

    return title;
  };
  const headers = [
    {
      id: 'platform',
      numeric: false,
      disablePadding: false,
      label: 'Platform',
    },
    {
      id: 'beforePeriod',
      numeric: false,
      disablePadding: false,
      label: getPeriod(currentTitle, current),
    },
    {
      id: 'afterPeriod',
      numeric: false,
      disablePadding: true,
      label: getPeriod(compareTitle, compare),
    },
    {
      id: 'evolution',
      numeric: false,
      disablePadding: true,
      label: 'Evolution',
    },
  ];

  const { renderPlatform, renderSimpleRow, renderPlatformSkeleton, renderSimpleRowSkeleton } =
    useTableContentFormatter();
  const cellTemplatesObject = {
    platform: renderPlatform,
    beforePeriod: renderSimpleRow,
    afterPeriod: renderSimpleRow,
    evolution: renderSimpleRow,
  };
  const renderRowsByHeader = (r) =>
    headers.reduce(
      (acc, cur) => ({
        ...acc,
        [cur.id]: cellTemplatesObject[cur.id](r, cur),
        id: r.platform,
        data: r,
      }),
      {}
    );
  const cellTemplatesObjectLoading = {
    platform: renderPlatformSkeleton,
    beforePeriod: renderSimpleRowSkeleton,
    afterPeriod: renderSimpleRowSkeleton,
    evolution: renderSimpleRowSkeleton,
  };
  const renderRowsByHeaderLoading = (r) =>
    headers.reduce(
      (acc, cur) => ({
        ...acc,
        [cur.id]: cellTemplatesObjectLoading[cur.id](cur),
        id: r,
      }),
      {}
    );
  const isDisplay = () => {
    if (selectedVendors('name', display).length === chainData.length) {
      return 'all Branches';
    }
    if (selectedVendors('name', display).length > 2) {
      return `${selectedVendors('name', display).length} selected Branches`;
    }
    return selectedVendors('name', display).join(', ');
  };
  const user = useUser();
  const onboard = async () => {
    const res = await settingsOnboarded({
      master_email: user.email,
      access_token: user.token,
    });

    setUserPlatformData({
      onboarded: res.onboarded,
      platforms: { ...userPlatformData.platforms, ...res.platforms },
    });
    if (res.onboarded) {
      navigate('/dashboard');
    }
  };
  const navigate = useNavigate();
  useEffect(() => {
    if (userPlatformData.onboarded) {
      navigate('/dashboard');
    }
    onboard();
  }, [branchData]);

  return (
    <div className='wrapper'>
      <ContainerKit>
        {!userPlatformData.onboarded && (
          <div className='dashboard-stepper'>
            <OnboardingModal propsVariables={propsVariables} />
            <OnboardingStepper
              activeStep={activeStep}
              accounts={accounts}
              openCloseModal={openCloseModal}
            />
          </div>
        )}
        <div className='block'>
          <TypographyKit className='dashboard-title'>
            {getPeriod(currentTitle, current).charAt(0).toUpperCase() +
              getPeriod(currentTitle, current).slice(1)}{' '}
            results for {isDisplay()}
          </TypographyKit>
          <TypographyKit className='dashboard-subtitle'>
            360Â° view of your restaurant revenue and profits
          </TypographyKit>
          <div className='dashboard-wrapper'>
            {links
              .filter((obj: { disabled?: boolean }) => !obj.disabled)
              .map((obj: { title: string; link: string; tooltip?: string }) => (
                <Widget
                  table={table}
                  setTable={setTable}
                  key={obj.link}
                  title={obj.title}
                  link={obj.link}
                  metricsbeforePeriod={{}}
                  metricsafterPeriod={{}}
                  loading={false}
                  links={links}
                  tooltip={obj.tooltip}
                />
              ))}
          </div>
        </div>
        <TableRevlyNew
          renderCustomSkelton={[0, 1, 2].map(renderRowsByHeaderLoading)}
          isLoading={false}
          link={table}
          setLink={setTable}
          links={links.filter((obj: { disabled?: boolean }) => !obj.disabled)}
          headers={headers}
          rows={[].map(renderRowsByHeader)}
        />
      </ContainerKit>
    </div>
  );
};

export default Dashboard;
