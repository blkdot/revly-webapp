import selectedVendors from 'components/restaurantDropdown/selectedVendors';
import OnboardingModal from 'components/settings/onboarding/OnboardingModal';
import OnboardingStepper from 'components/settings/onboarding/OnboardingStepper';
import useTableContentFormatter from 'components/tableRevly/tableContentFormatter/useTableContentFormatter';
import TableRevlyNew from 'components/tableRevly/TableRevlyNew';
import Widget from 'components/widget/Widget';
import { useDates, usePlatform } from 'contexts';
import { format, getYear } from 'date-fns';
import { enUS } from 'date-fns/locale';
import { useMetrics } from 'hooks';
import { useAtom } from 'jotai';
import { ContainerKit, TypographyKit } from 'kits';
import { useEffect, useMemo, useState } from 'react';
import { vendorsAtom } from 'store/vendorsAtom';
import { DatePeriod } from 'types';
import './Dashboard.scss';

const Dashboard = () => {
  const { current, compare, calendar, currentTitle, compareTitle } = useDates();
  const [vendors] = useAtom(vendorsAtom);
  const { vendorsObj, display, chainData } = vendors;
  const [table, setTable] = useState('revenue');

  const m1 = useMetrics(current, vendorsObj);
  const m2 = useMetrics(compare, vendorsObj);

  const metricsBeforePeriod = useMemo(() => m1.data?.metrics || [], [m1.data]);
  const metricsAfterPeriod = useMemo(() => m2.data?.metrics || [], [m2.data]);

  const loading = m1.isLoading || m2.isLoading;

  const links = [
    { title: 'Revenue', link: 'revenue', tooltip: 'Revenue generated by the offer' },
    { title: 'Orders', link: 'n_orders', tooltip: '# of orders generated by the offer' },
    { title: 'Avg. basket', link: 'average_basket' },
    { title: 'Accrued discount', link: 'accrued_discounts' },
    {
      title: 'Ads spend',
      link: 'accrued_ads',
      tooltip:
        'The total budget spent on advertising (CPC and premium positions) across all platforms',
    },
    {
      title: 'Return on Ads Spend',
      link: 'roas',
      tooltip:
        'The amount of revenue earned for every AED invested in advertising (CPC, premium positions)',
    },
    {
      title: 'Net revenue',
      link: 'profit',
      tooltip: `Revenue generated by the offer minus aggregator's commission, discounts amount, ads CPC and food cost.`,
    },
    {
      title: 'Return on investment',
      link: 'roi',
      tooltip: `# AED generated in Profits for every 1 AED spent on discount. Profits are revenue minus aggregator's commission, order discount, ads CPC and food cost.`,
    },
  ];

  const [openedModal, setOpenedModal] = useState(false);
  const [activeStep, setActiveStep] = useState(0);
  const [branchDataUploading, setBranchDataUploading] = useState([]);
  const [branchData, setBranchData] = useState([]);
  const [accounts, setAccounts] = useState([]);
  const [connectAccount, setConnectAccount] = useState('account');
  const [connect, setConnect] = useState('');
  const openCloseModal = () => {
    setOpenedModal(!openedModal);
    if (connectAccount === 'manageBranch' || connectAccount === 'completed') {
      setConnectAccount('account');
    }
    const body = document.querySelector('body');
    const navbar = document.querySelector('.Navbar');
    if (!openedModal) {
      navbar.classList.add('openedModal');
      body.style.overflowY = 'hidden';
      return;
    }
    body.style.overflowY = 'visible';
  };
  const propsVariables = {
    openCloseModal,
    setConnect,
    connect,
    setAccounts,
    accounts,
    setBranchData,
    branchData,
    setBranchDataUploading,
    branchDataUploading,
    setActiveStep,
    activeStep,
    openedModal,
    connectAccount,
    setConnectAccount,
  };
  const { userPlatformData } = usePlatform();

  const getPeriod = (title: string, period: DatePeriod) => {
    if (title === 'custom') {
      if (calendar === 'day') {
        return `${period.from.format('DD/MM')}`;
      }
      if (calendar === 'month') {
        return `${format(period.from.toDate(), 'LLL', { locale: enUS })}  -  ${getYear(
          period.from.toDate()
        )}`;
      }

      return `${period.from.format('DD/MM')} - ${period.until.format('DD/MM')}`;
    }

    return title;
  };
  const headers = [
    {
      id: 'platform',
      numeric: false,
      disablePadding: false,
      label: 'Platform',
    },
    {
      id: 'beforePeriod',
      numeric: false,
      disablePadding: false,
      label: getPeriod(currentTitle, current),
    },
    {
      id: 'afterPeriod',
      numeric: false,
      disablePadding: true,
      label: getPeriod(compareTitle, compare),
    },
    {
      id: 'evolution',
      numeric: false,
      disablePadding: true,
      label: 'Evolution',
    },
  ];

  const {
    renderPlatform,
    renderSimpleRow,
    renderPlatformSkeleton,
    renderSimpleRowSkeleton,
    renderEvolution,
    renderPercentSkeleton,
  } = useTableContentFormatter();
  const cellTemplatesObject = {
    platform: renderPlatform,
    beforePeriod: renderSimpleRow,
    afterPeriod: renderSimpleRow,
    evolution: renderEvolution,
  };
  const renderRowsByHeader = (r) =>
    headers.reduce(
      (acc, cur) => ({
        ...acc,
        [cur.id]: cellTemplatesObject[cur.id](r, cur),
        id: r.platform,
        data: r,
      }),
      {}
    );
  const cellTemplatesObjectLoading = {
    platform: renderPlatformSkeleton,
    beforePeriod: renderSimpleRowSkeleton,
    afterPeriod: renderSimpleRowSkeleton,
    evolution: renderPercentSkeleton,
  };
  const renderRowsByHeaderLoading = (r) =>
    headers.reduce(
      (acc, cur) => ({
        ...acc,
        [cur.id]: cellTemplatesObjectLoading[cur.id](cur),
        id: r,
      }),
      {}
    );
  const getNum = (metrics) => {
    if (metrics) {
      if (Number.isNaN(metrics[table]) || metrics[table] === null) {
        return '-';
      }
      if (table === 'roi') {
        return `${Math.round(metrics[table] * 100)} %`;
      }
      return parseFloat(Number(metrics[table]).toFixed(1)).toLocaleString('en-US');
    }
    return '-';
  };
  const [metrics, setMetrics] = useState([]);

  const getProcent = (metricsBefore, metricsAfter) => {
    if (metricsBefore && metricsAfter) {
      if (Number(metricsAfter) === 0) {
        return 0;
      }

      return Number(
        parseFloat((metricsBefore[table] / (metricsAfter[table] / 100) - 100).toFixed(0))
      );
    }
    return '-';
  };

  useEffect(() => {
    const platforms = [
      ...Object.keys(userPlatformData.platforms)
        .map((plat) => (userPlatformData.platforms[plat].some((obj) => obj.active) ? plat : null))
        .filter((plat) => plat),
      'all',
    ];
    const data = platforms.map((plat) => ({
      platform: plat === 'all' ? 'Total' : plat,
      beforePeriod: getNum(metricsBeforePeriod[plat]),
      afterPeriod: getNum(metricsAfterPeriod[plat]),
      evolution: getProcent(metricsBeforePeriod[plat], metricsAfterPeriod[plat]),
    }));
    setMetrics(data);
  }, [metricsBeforePeriod, metricsAfterPeriod, table]);

  const isDisplay = () => {
    if (selectedVendors('name', display).length === chainData.length) {
      return 'all Branches';
    }
    if (selectedVendors('name', display).length > 2) {
      return `${selectedVendors('name', display).length} selected Branches`;
    }
    return selectedVendors('name', display).join(', ');
  };
  return (
    <div className='wrapper'>
      <ContainerKit>
        {!userPlatformData.onboarded && (
          <div className='dashboard-stepper'>
            <OnboardingModal propsVariables={propsVariables} />
            <OnboardingStepper
              activeStep={activeStep}
              accounts={accounts}
              openCloseModal={openCloseModal}
            />
          </div>
        )}
        <div className='block'>
          <TypographyKit className='dashboard-title'>
            {getPeriod(currentTitle, current).charAt(0).toUpperCase() +
              getPeriod(currentTitle, current).slice(1)}{' '}
            results for {isDisplay()}
          </TypographyKit>
          <TypographyKit className='dashboard-subtitle'>
            360Â° view of your restaurant revenue and profits
          </TypographyKit>
          <div className='dashboard-wrapper'>
            {links.map((obj: { title: string; link: string; tooltip?: string }) => (
              <Widget
                table={table}
                setTable={setTable}
                key={obj.link}
                title={obj.title}
                link={obj.link}
                metricsbeforePeriod={metricsBeforePeriod}
                metricsafterPeriod={metricsAfterPeriod}
                loading={
                  metricsAfterPeriod.length === 0 || metricsBeforePeriod.length === 0 || loading
                }
                links={links}
                tooltip={obj.tooltip}
              />
            ))}
          </div>
        </div>
        <TableRevlyNew
          renderCustomSkelton={[0, 1, 2].map(renderRowsByHeaderLoading)}
          isLoading={loading}
          link={table}
          setLink={setTable}
          links={links}
          headers={headers}
          rows={metrics.map(renderRowsByHeader)}
        />
      </ContainerKit>
    </div>
  );
};

export default Dashboard;
